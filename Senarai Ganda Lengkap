//senaraiberantaigandalengkap.cpp
//Mendemonstrasikan senarai berantai ganda
#include <iostream>
#include <conio.h>
using namespace std;

class Simpul
{
	public:
		double dData;//item data
		Simpul* pBrktnya;//simpul berikutnya pada senarai
		Simpul* pSblmnya;//simpul sebelumnya pada senarai
		
	public:
		Simpul(double dd) ://konstruktor
		dData(dd), pBrktnya(NULL), pSblmnya(NULL)
		{}
		void tampilSenarai() //menampilkan simpul
		{ cout << dData <<"";}
}; //akhir kelas Simpul
		
class SenaraiBerantaiGanda
{
	private:
		Simpul* pPertama; //pointer ke item pertama
		Simpul* pAkhir; //pointer ke item terakhir
		
	public:
		SenaraiBerantaiGanda() : //konstruktor
		pPertama(NULL), pAkhir(NULL)
		{}
		~SenaraiBerantaiGanda() //destruktor (menghapus simpul)
		{
			Simpul* pSkrg = pPertama; //mulai diawal senarai
			while(pSkrg != NULL) //sampai akhir senarai
			{
				Simpul* pLama = pSkrg;
				pSkrg = pSkrg->pBrktnya;
				delete pLama;	
			}
		}
		
		bool apaKosong()
		{ return pPertama==NULL;}
		
		//menyisipkan diawal senarai
		void sisipPertama(double dd)
		{
			Simpul* pSimpulBaru = new Simpul(dd);
			if ( apaKosong() )
			pAkhir = pSimpulBaru;
			else
			pPertama->pSblmnya = pSimpulBaru;
			pSimpulBaru->pBrktnya = pPertama;
			pPertama = pSimpulBaru;
		}
		
		void sisipAkhir(double dd)
		{
			Simpul* pSimpulBaru = new Simpul(dd);
			if ( apaKosong())
			pPertama = pSimpulBaru;
			else
			{
				pAkhir->pBrktnya = pSimpulBaru;
				pSimpulBaru->pSblmnya = pAkhir;
			}
			pAkhir = pSimpulBaru;
		}
		
		void hapusPertama()
		{ //(asumsi senarai kososng)
		Simpul* pTemp = pPertama;
		if(pPertama->pBrktnya == NULL)
		pAkhir = NULL;
		else
		pPertama->pBrktnya->pSblmnya = NULL;
		pPertama = pPertama->pBrktnya;
		delete pTemp;
		}
		
		void hapusAkhir()
		{
			Simpul* pTemp = pAkhir;
			if(pPertama->pBrktnya == NULL)
			pPertama = NULL;
			else
			pAkhir->pSblmnya->pBrktnya = NULL;
			pAkhir = pAkhir->pSblmnya;
			delete pTemp;
		}
		
		bool sisipSetelah(double kunci, double dd)
		{
			Simpul* pSkrg = pPertama;
			while(pSkrg->dData != kunci)
			{
				pSkrg = pSkrg->pBrktnya;
				if(pSkrg == NULL)
				return false;
			}
			Simpul* pSimpulBaru = new Simpul(dd);
			if(pSkrg==pAkhir)
			{
				pSimpulBaru->pBrktnya = NULL;
				pAkhir = pSimpulBaru;
			}
			else
			{
				pSimpulBaru->pBrktnya = pSkrg->pBrktnya;
				pSkrg->pBrktnya->pSblmnya = pSimpulBaru;
			}
			pSimpulBaru->pSblmnya = pSkrg;
			pSkrg->pBrktnya = pSimpulBaru;
			return true;
		}
		
		bool hapusKunci(double kunci)
		{
			Simpul* pSkrg = pPertama;
			while(pSkrg->dData != kunci)
			{
				pSkrg = pSkrg->pBrktnya;
				if(pSkrg == NULL)
				return false;
			}
			if(pSkrg==pPertama)
			pPertama = pSkrg->pBrktnya;
			else
			pSkrg->pSblmnya->pBrktnya = pSkrg->pBrktnya;
			if(pSkrg==pAkhir)
			pAkhir = pSkrg->pSblmnya;
			else
			pSkrg->pBrktnya->pSblmnya = pSkrg->pSblmnya;
			delete pSkrg;
			return true;
		}
		
		void tampilMaju()
		{
			cout << "Senarai (pertama-->akhir): ";
			Simpul* pSkrg = pPertama;
			while(pSkrg !=NULL)
			{
				pSkrg->tampilSenarai();
				pSkrg = pSkrg->pBrktnya;
			}
			cout << endl;
		}
		
		void tampilMundur()
		{
			cout <<"Senarai (akhir-->pertama): ";
			Simpul* pSkrg = pAkhir;
			while(pSkrg != NULL)
			{
				pSkrg->tampilSenarai();
				pSkrg = pSkrg->pSblmnya;
			}
			cout << endl;
		}
};

int main()
{
	SenaraiBerantaiGanda senarai;
	senarai.sisipPertama(22);
	senarai.sisipPertama(44);
	senarai.sisipPertama(66);
	
	senarai.sisipAkhir(11);
	senarai.sisipAkhir(33);
	senarai.sisipAkhir(55);
	
	senarai.tampilMaju();
	senarai.tampilMundur();
	
	cout << "Menghapus simpul pertama, simpul akhir, dan 11" << endl;
	senarai.hapusPertama();
	senarai.hapusAkhir();
	senarai.hapusKunci(11);
	
	senarai.tampilMaju();
	
	cout << "Menyisipkan 77 setelah simpul 22, dan 88 setelah 33" << endl;
	senarai.sisipSetelah(22, 77);
	senarai.sisipSetelah(33, 88);
	senarai.tampilMaju();
	
	getch();
	return 0;
}
